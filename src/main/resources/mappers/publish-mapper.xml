<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="publishMapper">
	<!-- Contract 계약 resultMap -->
	<resultMap type="Contract" id="resultContract">
		<result property="contrId" column="CONTR_ID" />
		<result property="empId" column="EMP_ID" />
		<result property="writerId" column="WRITER_ID" />
		<result property="bookName" column="BOOK_NAME" />
		<result property="empName" column="EMP_NAME" />
		<result property="contrDate" column="CONTR_DATE" />
		<result property="contrDoc" column="CONTR_DOC" />
		<result property="contrState" column="CONTR_STATE" />
		<result property="writerName" column="WRITER_NAME" />
	</resultMap>
	
	
	<!-- Edit 편집 resultMap -->
	<resultMap type="Edit" id="resultEdit">
		<result property="editId" column="EDIT_ID" />
		<result property="depId" column="DEP_ID" />
		<result property="empId" column="EMP_ID" />
		<result property="empName" column="EMP_NAME" />
		<result property="bookName" column="BOOK_NAME" />
		<result property="editState" column="EDIT_STATE" />
		<result property="startDate" column="START_DATE" />
		<result property="endDate" column="END_DATE" />
		<result property="depName" column="DEP_NAME" />
	</resultMap>
	
	
	<!-- Book 도서 resultMap -->
	<resultMap type="Book" id="resultBook">
		<result property="bookId" column="BOOK_ID" />
		<result property="writerId" column="WRITER_ID" />
		<result property="bookName" column="BOOK_NAME" />
		<result property="writerName" column="WRITER_NAME" />
		<result property="bookPriceS" column="BOOK_PRICE_S" />
		<result property="bookPriceR" column="BOOK_PRICE_R" />
		<result property="bookPrice" column="BOOK_PRICE" />
		<result property="category" column="CATEGORY" />
		<result property="isbn" column="ISBN" />
		<result property="bookState" column="BOOK_STATE" />
		<result property="engraving" column="ENGRAVING" />
		<result property="pubDate" column="PUB_DATE" />
		<result property="regDate" column="REG_DATE" />
	</resultMap>


	<!-- Writer 작가 resultMap -->
	<resultMap type="Writer" id="resultWriter">
		<result property="writerId" column="WRITER_ID" />
		<result property="writerName" column="WRITER_NAME" />
		<result property="phone" column="PHONE" />
		<result property="writerBirth" column="WRITER_BIRTH" />
		<result property="email" column="EMAIL" />
		<result property="address" column="ADDRESS" />
		<result property="bank" column="BANK" />
		<result property="account" column="ACCOUNT" />
	</resultMap>


	<!-- Contract 계약 -->
	<select id="selectContractListCount" resultType="_int">
		select count(*) from contract
	</select>
	
	<select id="selectContractList" parameterType="Paging" resultMap="resultContract">
		select *
		from (select rownum rnum, sub.*
			  from (select * from contract
			  		left join writer using(WRITER_ID)
					order by contr_id desc) sub)
		where rnum between #{ startRow } and #{ endRow } 
	</select>
	
	<select id="selectContractSearch" parameterType="Paging" resultMap="resultWriter">
		<![CDATA[
			select * 
			from (select rownum rnum, CONTR_ID, EMP_ID, WRITER_ID, 
					   BOOK_NAME, EMP_NAME, CONTR_DATE, 
			           CONTR_DOC, CONTR_STATE 
			      from (select * from contract 
			           order by BOARD_ID desc)) 
			left join writer using(WRITER_NAME)
			where rnum >= #{ startRow } and rnum <= #{ endRow }
		]]>
	</select>
	
	<select id="selectContract" parameterType="_int" resultMap="resultContract">
		select * 
		from contract
		where contract_id = #{ contractId }
	</select>
	
	<select id="selectMaxContrId" resultType="_int">
		select nvl(max(CONTR_ID), 0) from Contract
	</select>	
		
	<select id="selectContractCountByDate" parameterType="Search" resultType="_int">
		select count(*) from contract
		where contr_date between #{ begin } and (to_date(#{ end }) + 1 - 1/86400)
	</select>
	
	<select id="selectContractByDate" parameterType="Search" resultMap="resultContract">
		<![CDATA[
		select *
		from (select rownum rnum, contr_id, emp_id, writer_id, book_name, emp_name,
					 contr_date, contr_doc, contr_state, category
		      from (select *
                    from contract
                    where contr_date between #{ begin } and (to_date(#{ end }) + 1 - 1/86400)))
		where rnum between #{ startRow } AND #{ endRow }
		order by contr_date desc
		]]>
	</select>

	<select id="selectContractCountByBook" parameterType="Search" resultType="_int">
		select count(*) from contract
		where book_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectContractByBook" parameterType="Search" resultMap="resultContract">
		select *
		from (select rownum rnum, sub.*
			  from (select * from contract
					where book_name like '%' || #{ keyword } || '%'
					order by contr_date desc, contr_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>	
		
	<select id="selectContractCountByCategory" parameterType="Search" resultType="_int">
		select count(*) from contract
		where category like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectContractByCategory" parameterType="Search" resultMap="resultContract">
		select *
		from (select rownum rnum, sub.*
			  from (select * from contract
					where category like '%' || #{ keyword } || '%'
					order by contr_date desc, contr_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>	
	
	<select id="selectContractCountByWriter" parameterType="Search" resultType="_int">
		select count(*) from contract
		join writer using (writer_id)
		where writer_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectContractByWriter" parameterType="Search" resultMap="resultContract">
		select *
		from (select rownum rnum, sub.*
			  from (select * from contract
			  		join writer using (writer_id)
					where writer_name like '%' || #{ keyword } || '%'
					order by contr_date desc, contr_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>	
	
	<select id="selectContractCountByEmployee" parameterType="Search" resultType="_int">
		select count(*) from contract
		where emp_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectContractByEmployee" parameterType="Search" resultMap="resultContract">
		select *
		from (select rownum rnum, sub.*
			  from (select * from contract
					where emp_name like '%' || #{ keyword } || '%'
					order by contr_date desc, contr_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>
	
	<select id="selectContractCountByStatus" parameterType="Search" resultType="_int">
		select count(*) from contract
		where contr_state = #{ contrState }
	</select>
		
	<select id="selectContractByStatus" parameterType="Search" resultMap="resultContract">
		select *
		from (select rownum rnum, sub.*
			  from (select * from contract
					where contr_state = #{ contrState }
					order by contr_date desc, contr_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>
	
	<insert id="insertContract" parameterType="Contract">
		insert into Contract
		values (#{ contrId },#{ empId }, #{ writerId }, #{ bookName },
				(select emp_name from employee where emp_id = #{ empId }),
				#{ contrDate }, default, default, #{ category })
	</insert>
	
	<update id="updateContract" parameterType="Contract">
		update contract
		set emp_id = #{ empId }, contr_state = #{ contrState }, emp_name = (select emp_name from employee where emp_id = #{ empId }),
			contr_date = #{ contrDate }, contr_doc = #{ contrDoc }
		where contr_id = #{ contrId }
	</update>
	
	<select id="deleteContract" parameterType="_int">
		delete from contract
		where contr_id = #{ contrId }
	</select>


	<!-- Edit 편집 -->
	<select id="selectEditList" parameterType="Paging" resultMap="resultEdit">
		select *
		from (select rownum rnum, sub.*
			  from (select * from edit
			  		left join department using(DEP_ID)
					order by edit_id desc, dep_id desc) sub)
		where rnum between #{ startRow } and #{ endRow } 
	</select>
	
	<select id="selectEdit" parameterType="_int" resultMap="resultEdit">
		select * 
		from edit
		where edit_id = #{ editId }
	</select>
	
	<select id="selectEditListCount" resultType="_int">
		select count(*) from edit
	</select>
	
	<select id="selectMaxEditId" resultType="_int">
		select nvl(max(EDIT_ID), 0) from Edit
	</select>
	
	<select id="selectEditCountBySDate" parameterType="Search" resultType="_int">
		select count(*) from edit
		where start_date between #{ begin } and (to_date(#{ end }) + 1 - 1/86400)
	</select>
	
	<select id="selectEditBySDate" parameterType="Search" resultMap="resultEdit">
		select e.*, d.dep_name
		from (select rownum rnum, edit_id, dep_id, emp_id, emp_name, book_name, 
		           edit_state, start_date, end_date
		      from (select * from edit
		        	where start_date between #{ begin } and (to_date(#{ end }) + 1 - 1/86400))
			 ) e
		left join department d on e.dep_id = d.dep_id
		where rnum between #{ startRow } AND #{ endRow }
		order by edit_id desc, start_date desc
	</select>
	
	<select id="selectEditCountByEDate" parameterType="Search" resultType="_int">
		select count(*) from edit
		where end_date between #{ begin } and (to_date(#{ end }) + 1 - 1/86400)
	</select>
	
	<select id="selectEditByEDate" parameterType="Search" resultMap="resultEdit">
		select e.*, d.dep_name
		from (select rownum rnum, edit_id, dep_id, emp_id, emp_name, book_name, 
		           edit_state, start_date, end_date
		      from (select * from edit
		        	where end_date between #{ begin } and (to_date(#{ end }) + 1 - 1/86400))
			 ) e
		left join department d on e.dep_id = d.dep_id
		where rnum between #{ startRow } AND #{ endRow }
		order by edit_id desc, end_date desc
	</select>
	
	<select id="selectEditCountByDepartment" parameterType="Search" resultType="_int">
		select count(*) from edit
		join department using (dep_id)
		where dep_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectEditByDepartment" parameterType="Search" resultMap="resultEdit">
		select *
		from (select rownum rnum, sub.*
			  from (select * from edit
			  		join department using (dep_id)
					where dep_name like '%' || #{ keyword } || '%'
					order by start_date desc, edit_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>	
		
	<select id="selectEditCountByEmployee" parameterType="Search" resultType="_int">
		select count(*) from edit
		where emp_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectEditByEmployee" parameterType="Search" resultMap="resultEdit">
		select *
		from (select rownum rnum, sub.*
			  from (select * from edit
					where emp_name like '%' || #{ keyword } || '%'
					order by start_date desc, edit_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>	
	
	<select id="selectEditCountByBook" parameterType="Search" resultType="_int">
		select count(*) from edit
		where book_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectEditByBook" parameterType="Search" resultMap="resultEdit">
		select *
		from (select rownum rnum, sub.*
			  from (select * from edit
					where book_name like '%' || #{ keyword } || '%'
					order by start_date desc, edit_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>
	
	<insert id="insertEdit" parameterType="Edit">
		insert into Edit 
		values (#{ editId }, #{ depId }, #{ empId }, 
			   (select emp_name from employee where emp_id = #{ empId }),
		        #{ bookName }, #{ editState }, default, default, (select contr_id from contract where book_name = #{ bookName }))
	</insert>
	
	<update id="updateEdit" parameterType="Edit">
		update edit
		set emp_id = #{ empId }, emp_name = (select emp_name from employee where emp_id = #{ empId }), edit_state = #{ editState },
			start_date = #{ startDate }, end_date = #{ endDate }
		where edit_id = #{ editId } and dep_id = #{ depId }
	</update>
	
	<select id="deleteEdit" parameterType="_int">
		delete from edit
		where edit_id = #{ editId } and dep_id = #{ depId }
	</select>
	

	<!-- Book 도서 -->
	<select id="selectBookList" parameterType="Paging" resultMap="resultBook">
		select *
		from (select rownum rnum, sub.*
			  from (select * from book
					order by book_id desc) sub)
		where rnum between #{ startRow } and #{ endRow } 
	</select>
	
	<select id="selectBook" parameterType="_int" resultMap="resultBook">
		select * 
		from book
		where book_id = #{ bookId }
	</select>
	
	<select id="selectBookListCount" resultType="_int">
		select count(*) from book
	</select>
	
	<select id="selectMaxBookId" resultType="_int">
		select nvl(max(BOOK_ID), 0) from Book
	</select>	
	
	<select id="selectBookCountByDate" parameterType="Search" resultType="_int">
		select count(*) from book
		where reg_date between #{ begin } and (to_date(#{ end }) + 1 - 1/86400)
	</select>
	
	<select id="selectBookByDate" parameterType="Search" resultMap="resultBook">
		<![CDATA[
		select *
		from (select rownum rnum, book_id, writer_id, book_name, writer_name, book_price_s, book_price_R,
					 book_price, category, isbn, book_state, engraving, pub_date, reg_date
		      from (select *
                    from book
                    where reg_date between #{ begin } and (to_date(#{ end }) + 1 - 1/86400)))
		where rnum between #{ startRow } AND #{ endRow }
		order by reg_date desc
		]]>
	</select>
	
	<select id="selectBookCountByBook" parameterType="Search" resultType="_int">
		select count(*) from book
		where book_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectBookByBook" parameterType="Search" resultMap="resultBook">
		select *
		from (select rownum rnum, sub.*
			  from (select * from book
					where book_name like '%' || #{ keyword } || '%'
					order by reg_date desc, book_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>	
		
	<select id="selectBookCountByCategory" parameterType="Search" resultType="_int">
		select count(*) from book
		where category like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectBookByCategory" parameterType="Search" resultMap="resultBook">
		select *
		from (select rownum rnum, sub.*
			  from (select * from book
					where category like '%' || #{ keyword } || '%'
					order by reg_date desc, book_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>	
	
	<select id="selectBookCountByWriter" parameterType="Search" resultType="_int">
		select count(*) from book
		where writer_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectBookByWriter" parameterType="Search" resultMap="resultBook">
		select *
		from (select rownum rnum, sub.*
			  from (select * from book
					where writer_name like '%' || #{ keyword } || '%'
					order by reg_date desc, book_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>
	
	<insert id="insertBook" parameterType="Book">
		insert into Book 
		values (#{ bookId }, #{ writerId }, #{ bookName }, (select writer_name from writer where writer_id = #{ writerId }), 
		        null, null, #{ bookPrice }, #{ category }, #{ isbn },
		        #{ bookState }, #{ engraving }, default, default)
	</insert>
	
	<update id="updateBook" parameterType="Book">
		update book
		set book_state = #{ bookState }, engraving = #{ engraving }, pub_date = #{ pubDate }
		where book_id = #{ bookId }
	</update>
	
	<select id="deleteBook" parameterType="_int">
		delete from book
		where book_id = #{ bookId }
	</select>
	
	
	<!-- Writer 작가 -->
	<select id="selectWriterList" parameterType="Paging" resultMap="resultWriter">
		select *
		from (select rownum rnum, sub.*
			  from (select * from writer
					order by writer_id desc) sub)
		where rnum between #{ startRow } and #{ endRow } 
	</select>

	<select id="selectWriter" parameterType="_int" resultMap="resultWriter">
		select * 
		from writer
		where writer_id = #{ writerId }
	</select>
	
	<select id="selectWriterListCount" resultType="_int">
		select count(*) from writer
	</select>
	
	<select id="selectMaxWriterId" resultType="_int">
		select nvl(max(WRITER_ID), 0) from Writer
	</select>
	
	<select id="selectWriterCountByWriter" parameterType="Search" resultType="_int">
		select count(*) from writer
		where writer_name like '%' || #{ keyword } || '%'
	</select>
		
	<select id="selectWriterByWriter" parameterType="Search" resultMap="resultWriter">
		select *
		from (select rownum rnum, sub.*
			  from (select * from writer
					where writer_name like '%' || #{ keyword } || '%'
					order by writer_id desc) sub)
		where rnum between #{ startRow } and #{ endRow }
	</select>
		
	<insert id="insertWriter" parameterType="Writer">
		insert into Writer 
		values (#{ writerId }, #{ writerName }, #{ phone }, #{ writerBirth }, 
		        #{ email }, #{ address }, #{ bank }, #{ account })
	</insert>
	
	<update id="updateWriter" parameterType="Writer">
		update writer
		set phone = #{ phone }, writer_birth = #{ writerBirth }, email = #{ email },
			address = #{ address }, bank = #{ bank }, account = #{ account }
		where writer_id = #{ writerId }
	</update>
	
	<select id="deleteWriter" parameterType="_int">
		delete from writer
		where writer_id = #{ writerId }
	</select>
</mapper>